/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcGloballyUniqueId.h"
#include "ifcpp/IFC4X3/include/IfcLabel.h"
#include "ifcpp/IFC4X3/include/IfcOwnerHistory.h"
#include "ifcpp/IFC4X3/include/IfcPositioningElement.h"
#include "ifcpp/IFC4X3/include/IfcProduct.h"
#include "ifcpp/IFC4X3/include/IfcRelPositions.h"
#include "ifcpp/IFC4X3/include/IfcText.h"

// ENTITY IfcRelPositions 
IFC4X3::IfcRelPositions::IfcRelPositions( int tag ) { m_tag = tag; }
shared_ptr<BuildingObject> IFC4X3::IfcRelPositions::getDeepCopy( BuildingCopyOptions& options )
{
	shared_ptr<IfcRelPositions> copy_self( new IfcRelPositions() );
	if( m_GlobalId )
	{
		if( options.create_new_IfcGloballyUniqueId ) { copy_self->m_GlobalId = make_shared<IfcGloballyUniqueId>( createBase64Uuid().data() ); }
		else { copy_self->m_GlobalId = dynamic_pointer_cast<IfcGloballyUniqueId>( m_GlobalId->getDeepCopy(options) ); }
	}
	if( m_OwnerHistory )
	{
		if( options.shallow_copy_IfcOwnerHistory ) { copy_self->m_OwnerHistory = m_OwnerHistory; }
		else { copy_self->m_OwnerHistory = dynamic_pointer_cast<IfcOwnerHistory>( m_OwnerHistory->getDeepCopy(options) ); }
	}
	if( m_Name ) { copy_self->m_Name = dynamic_pointer_cast<IfcLabel>( m_Name->getDeepCopy(options) ); }
	if( m_Description ) { copy_self->m_Description = dynamic_pointer_cast<IfcText>( m_Description->getDeepCopy(options) ); }
	if( m_RelatingPositioningElement ) { copy_self->m_RelatingPositioningElement = dynamic_pointer_cast<IfcPositioningElement>( m_RelatingPositioningElement->getDeepCopy(options) ); }
	for( size_t ii=0; ii<m_RelatedProducts.size(); ++ii )
	{
		auto item_ii = m_RelatedProducts[ii];
		if( item_ii )
		{
			copy_self->m_RelatedProducts.emplace_back( dynamic_pointer_cast<IfcProduct>(item_ii->getDeepCopy(options) ) );
		}
	}
	return copy_self;
}
void IFC4X3::IfcRelPositions::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_tag << "= IFCRELPOSITIONS" << "(";
	if( m_GlobalId ) { m_GlobalId->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_OwnerHistory ) { stream << "#" << m_OwnerHistory->m_tag; } else { stream << "$"; }
	stream << ",";
	if( m_Name ) { m_Name->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_Description ) { m_Description->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_RelatingPositioningElement ) { stream << "#" << m_RelatingPositioningElement->m_tag; } else { stream << "$"; }
	stream << ",";
	writeEntityList( stream, m_RelatedProducts );
	stream << ");";
}
void IFC4X3::IfcRelPositions::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcRelPositions::readStepArguments( const std::vector<std::string>& args, const std::map<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream )
{
	const size_t num_args = args.size();
	if( num_args != 6 ){ std::stringstream err; err << "Wrong parameter count for entity IfcRelPositions, expecting 6, having " << num_args << ". Entity ID: " << m_tag << std::endl; throw BuildingException( err.str().c_str() ); }
	m_GlobalId = IfcGloballyUniqueId::createObjectFromSTEP( args[0], map, errorStream );
	readEntityReference( args[1], m_OwnerHistory, map, errorStream );
	m_Name = IfcLabel::createObjectFromSTEP( args[2], map, errorStream );
	m_Description = IfcText::createObjectFromSTEP( args[3], map, errorStream );
	readEntityReference( args[4], m_RelatingPositioningElement, map, errorStream );
	readEntityReferenceList( args[5], m_RelatedProducts, map, errorStream );
}
void IFC4X3::IfcRelPositions::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcRelConnects::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "RelatingPositioningElement", m_RelatingPositioningElement ) );
	if( !m_RelatedProducts.empty() )
	{
		shared_ptr<AttributeObjectVector> RelatedProducts_vec_object( new AttributeObjectVector() );
		std::copy( m_RelatedProducts.begin(), m_RelatedProducts.end(), std::back_inserter( RelatedProducts_vec_object->m_vec ) );
		vec_attributes.emplace_back( std::make_pair( "RelatedProducts", RelatedProducts_vec_object ) );
	}
}
void IFC4X3::IfcRelPositions::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcRelConnects::getAttributesInverse( vec_attributes_inverse );
}
void IFC4X3::IfcRelPositions::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcRelConnects::setInverseCounterparts( ptr_self_entity );
	shared_ptr<IfcRelPositions> ptr_self = dynamic_pointer_cast<IfcRelPositions>( ptr_self_entity );
	if( !ptr_self ) { throw BuildingException( "IfcRelPositions::setInverseCounterparts: type mismatch" ); }
	for( size_t i=0; i<m_RelatedProducts.size(); ++i )
	{
		if( m_RelatedProducts[i] )
		{
			m_RelatedProducts[i]->m_PositionedRelativeTo_inverse.emplace_back( ptr_self );
		}
	}
	if( m_RelatingPositioningElement )
	{
		m_RelatingPositioningElement->m_Positions_inverse.emplace_back( ptr_self );
	}
}
void IFC4X3::IfcRelPositions::unlinkFromInverseCounterparts()
{
	IfcRelConnects::unlinkFromInverseCounterparts();
	for( size_t i=0; i<m_RelatedProducts.size(); ++i )
	{
		if( m_RelatedProducts[i] )
		{
			std::vector<weak_ptr<IfcRelPositions> >& PositionedRelativeTo_inverse = m_RelatedProducts[i]->m_PositionedRelativeTo_inverse;
			for( auto it_PositionedRelativeTo_inverse = PositionedRelativeTo_inverse.begin(); it_PositionedRelativeTo_inverse != PositionedRelativeTo_inverse.end(); )
			{
				weak_ptr<IfcRelPositions> self_candidate_weak = *it_PositionedRelativeTo_inverse;
				if( self_candidate_weak.expired() )
				{
					++it_PositionedRelativeTo_inverse;
					continue;
				}
				shared_ptr<IfcRelPositions> self_candidate( *it_PositionedRelativeTo_inverse );
				if( self_candidate.get() == this )
				{
					it_PositionedRelativeTo_inverse= PositionedRelativeTo_inverse.erase( it_PositionedRelativeTo_inverse );
				}
				else
				{
					++it_PositionedRelativeTo_inverse;
				}
			}
		}
	}
	if( m_RelatingPositioningElement )
	{
		std::vector<weak_ptr<IfcRelPositions> >& Positions_inverse = m_RelatingPositioningElement->m_Positions_inverse;
		for( auto it_Positions_inverse = Positions_inverse.begin(); it_Positions_inverse != Positions_inverse.end(); )
		{
			weak_ptr<IfcRelPositions> self_candidate_weak = *it_Positions_inverse;
			if( self_candidate_weak.expired() )
			{
				++it_Positions_inverse;
				continue;
			}
			shared_ptr<IfcRelPositions> self_candidate( *it_Positions_inverse );
			if( self_candidate.get() == this )
			{
				it_Positions_inverse= Positions_inverse.erase( it_Positions_inverse );
			}
			else
			{
				++it_Positions_inverse;
			}
		}
	}
}
