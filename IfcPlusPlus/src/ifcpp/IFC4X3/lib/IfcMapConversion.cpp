/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include "ifcpp/model/AttributeObject.h"
#include "ifcpp/model/BuildingException.h"
#include "ifcpp/model/BuildingGuid.h"
#include "ifcpp/reader/ReaderUtil.h"
#include "ifcpp/writer/WriterUtil.h"
#include "ifcpp/IFC4X3/include/IfcCoordinateReferenceSystem.h"
#include "ifcpp/IFC4X3/include/IfcCoordinateReferenceSystemSelect.h"
#include "ifcpp/IFC4X3/include/IfcLengthMeasure.h"
#include "ifcpp/IFC4X3/include/IfcMapConversion.h"
#include "ifcpp/IFC4X3/include/IfcReal.h"

// ENTITY IfcMapConversion 
IFC4X3::IfcMapConversion::IfcMapConversion( int tag ) { m_tag = tag; }
void IFC4X3::IfcMapConversion::getStepLine( std::stringstream& stream, size_t precision ) const
{
	stream << "#" << m_tag << "= IFCMAPCONVERSION" << "(";
	if( m_SourceCRS ) { m_SourceCRS->getStepParameter( stream, true, precision ); } else { stream << "$" ; }
	stream << ",";
	if( m_TargetCRS ) { stream << "#" << m_TargetCRS->m_tag; } else { stream << "$"; }
	stream << ",";
	if( m_Eastings ) { m_Eastings->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_Northings ) { m_Northings->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_OrthogonalHeight ) { m_OrthogonalHeight->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_XAxisAbscissa ) { m_XAxisAbscissa->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_XAxisOrdinate ) { m_XAxisOrdinate->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_Scale ) { m_Scale->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_ScaleY ) { m_ScaleY->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ",";
	if( m_ScaleZ ) { m_ScaleZ->getStepParameter( stream, false, precision ); } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcMapConversion::getStepParameter( std::stringstream& stream, bool /*is_select_type*/, size_t /*precision*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcMapConversion::readStepArguments( const std::vector<std::string>& args, const std::map<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream )
{
	const size_t num_args = args.size();
	if( num_args > 0 ){m_SourceCRS = IfcCoordinateReferenceSystemSelect::createObjectFromSTEP( args[0], map, errorStream );}
	if( num_args > 1 ){readEntityReference( args[1], m_TargetCRS, map, errorStream );}
	if( num_args > 2 ){m_Eastings = IfcLengthMeasure::createObjectFromSTEP( args[2], map, errorStream );}
	if( num_args > 3 ){m_Northings = IfcLengthMeasure::createObjectFromSTEP( args[3], map, errorStream );}
	if( num_args > 4 ){m_OrthogonalHeight = IfcLengthMeasure::createObjectFromSTEP( args[4], map, errorStream );}
	if( num_args > 5 ){m_XAxisAbscissa = IfcReal::createObjectFromSTEP( args[5], map, errorStream );}
	if( num_args > 6 ){m_XAxisOrdinate = IfcReal::createObjectFromSTEP( args[6], map, errorStream );}
	if( num_args > 7 ){m_Scale = IfcReal::createObjectFromSTEP( args[7], map, errorStream );}
	if( num_args > 8 ){m_ScaleY = IfcReal::createObjectFromSTEP( args[8], map, errorStream );}
	if( num_args > 9 ){m_ScaleZ = IfcReal::createObjectFromSTEP( args[9], map, errorStream );}
	if( num_args != 10 ){ errorStream << "Wrong parameter count for entity IfcMapConversion, expecting 10, having " << num_args << ". Entity ID: " << m_tag << std::endl; }
}
void IFC4X3::IfcMapConversion::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcCoordinateOperation::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "Eastings", m_Eastings ) );
	vec_attributes.emplace_back( std::make_pair( "Northings", m_Northings ) );
	vec_attributes.emplace_back( std::make_pair( "OrthogonalHeight", m_OrthogonalHeight ) );
	vec_attributes.emplace_back( std::make_pair( "XAxisAbscissa", m_XAxisAbscissa ) );
	vec_attributes.emplace_back( std::make_pair( "XAxisOrdinate", m_XAxisOrdinate ) );
	vec_attributes.emplace_back( std::make_pair( "Scale", m_Scale ) );
	vec_attributes.emplace_back( std::make_pair( "ScaleY", m_ScaleY ) );
	vec_attributes.emplace_back( std::make_pair( "ScaleZ", m_ScaleZ ) );
}
void IFC4X3::IfcMapConversion::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcCoordinateOperation::getAttributesInverse( vec_attributes_inverse );
}
void IFC4X3::IfcMapConversion::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcCoordinateOperation::setInverseCounterparts( ptr_self_entity );
}
void IFC4X3::IfcMapConversion::unlinkFromInverseCounterparts()
{
	IfcCoordinateOperation::unlinkFromInverseCounterparts();
}
